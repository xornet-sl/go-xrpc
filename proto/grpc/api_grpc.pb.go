// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: proto/api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PingReplyer_Ping_FullMethodName            = "/proto.PingReplyer/Ping"
	PingReplyer_StreamPingsBoth_FullMethodName = "/proto.PingReplyer/StreamPingsBoth"
	PingReplyer_StreamPingsIn_FullMethodName   = "/proto.PingReplyer/StreamPingsIn"
	PingReplyer_StreamPingsOut_FullMethodName  = "/proto.PingReplyer/StreamPingsOut"
)

// PingReplyerClient is the client API for PingReplyer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PingReplyerClient interface {
	Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error)
	StreamPingsBoth(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PingMessage, PingMessage], error)
	StreamPingsIn(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PingMessage, PingMessage], error)
	StreamPingsOut(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PingMessage], error)
}

type pingReplyerClient struct {
	cc grpc.ClientConnInterface
}

func NewPingReplyerClient(cc grpc.ClientConnInterface) PingReplyerClient {
	return &pingReplyerClient{cc}
}

func (c *pingReplyerClient) Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingMessage)
	err := c.cc.Invoke(ctx, PingReplyer_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingReplyerClient) StreamPingsBoth(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PingMessage, PingMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PingReplyer_ServiceDesc.Streams[0], PingReplyer_StreamPingsBoth_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PingMessage, PingMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PingReplyer_StreamPingsBothClient = grpc.BidiStreamingClient[PingMessage, PingMessage]

func (c *pingReplyerClient) StreamPingsIn(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PingMessage, PingMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PingReplyer_ServiceDesc.Streams[1], PingReplyer_StreamPingsIn_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PingMessage, PingMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PingReplyer_StreamPingsInClient = grpc.ClientStreamingClient[PingMessage, PingMessage]

func (c *pingReplyerClient) StreamPingsOut(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PingMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PingReplyer_ServiceDesc.Streams[2], PingReplyer_StreamPingsOut_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PingMessage, PingMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PingReplyer_StreamPingsOutClient = grpc.ServerStreamingClient[PingMessage]

// PingReplyerServer is the server API for PingReplyer service.
// All implementations must embed UnimplementedPingReplyerServer
// for forward compatibility.
type PingReplyerServer interface {
	Ping(context.Context, *PingMessage) (*PingMessage, error)
	StreamPingsBoth(grpc.BidiStreamingServer[PingMessage, PingMessage]) error
	StreamPingsIn(grpc.ClientStreamingServer[PingMessage, PingMessage]) error
	StreamPingsOut(*PingMessage, grpc.ServerStreamingServer[PingMessage]) error
	mustEmbedUnimplementedPingReplyerServer()
}

// UnimplementedPingReplyerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPingReplyerServer struct{}

func (UnimplementedPingReplyerServer) Ping(context.Context, *PingMessage) (*PingMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPingReplyerServer) StreamPingsBoth(grpc.BidiStreamingServer[PingMessage, PingMessage]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPingsBoth not implemented")
}
func (UnimplementedPingReplyerServer) StreamPingsIn(grpc.ClientStreamingServer[PingMessage, PingMessage]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPingsIn not implemented")
}
func (UnimplementedPingReplyerServer) StreamPingsOut(*PingMessage, grpc.ServerStreamingServer[PingMessage]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPingsOut not implemented")
}
func (UnimplementedPingReplyerServer) mustEmbedUnimplementedPingReplyerServer() {}
func (UnimplementedPingReplyerServer) testEmbeddedByValue()                     {}

// UnsafePingReplyerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PingReplyerServer will
// result in compilation errors.
type UnsafePingReplyerServer interface {
	mustEmbedUnimplementedPingReplyerServer()
}

func RegisterPingReplyerServer(s grpc.ServiceRegistrar, srv PingReplyerServer) {
	// If the following call pancis, it indicates UnimplementedPingReplyerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PingReplyer_ServiceDesc, srv)
}

func _PingReplyer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingReplyerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PingReplyer_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingReplyerServer).Ping(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingReplyer_StreamPingsBoth_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingReplyerServer).StreamPingsBoth(&grpc.GenericServerStream[PingMessage, PingMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PingReplyer_StreamPingsBothServer = grpc.BidiStreamingServer[PingMessage, PingMessage]

func _PingReplyer_StreamPingsIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingReplyerServer).StreamPingsIn(&grpc.GenericServerStream[PingMessage, PingMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PingReplyer_StreamPingsInServer = grpc.ClientStreamingServer[PingMessage, PingMessage]

func _PingReplyer_StreamPingsOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingReplyerServer).StreamPingsOut(m, &grpc.GenericServerStream[PingMessage, PingMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PingReplyer_StreamPingsOutServer = grpc.ServerStreamingServer[PingMessage]

// PingReplyer_ServiceDesc is the grpc.ServiceDesc for PingReplyer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PingReplyer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PingReplyer",
	HandlerType: (*PingReplyerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _PingReplyer_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPingsBoth",
			Handler:       _PingReplyer_StreamPingsBoth_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamPingsIn",
			Handler:       _PingReplyer_StreamPingsIn_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamPingsOut",
			Handler:       _PingReplyer_StreamPingsOut_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/api.proto",
}
